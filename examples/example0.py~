"""
Simple use case of libNeuroML + Pyramidal

A simple, single-compartmental neuron is created using libNeuroML
and a simple simulation is run in both NEURON and MOOSE

NOTE: As a default, for now we're going to expect SI units
"""

import neuroml.morphology as ml
import neuroml.kinetics as kinetics
import neuroml.loaders as loaders
import pyramidal.environments as envs

print('Building compartment:')
compartment=ml.Segment(length=10,proximal_diameter=10,distal_diameter=10)
morphology = compartment.morphology

#Create some passive properties and a leak current:
passive = kinetics.PassiveProperties(init_vm=-60e-3,rm=5e9)#essentially  infinite membrane resistance
leak = kinetics.LeakCurrent(em=-60e-3)
#insert them into the morphology:
morphology.passive_properties = passive
morphology.leak_current = leak

#create a current clamp stimulus:
print('Inserting current clamp:')
stim = kinetics.IClamp(5e-9,300e-3,300e-3)
#insert the stimulus:
morphology[0].insert(stim)

#create the MOOSE environmet
print('Building MOOSE environment and importing cell..')
moose_env = envs.MooseEnv(sim_time=2)
moose_env.import_cell(morphology)
#Run the MOOSE simulation:
print('Running simulation:')
moose_env.run_simulation()
print('MOOSE simulation finished running')
#env.show_simulation()

#create the NEURON environment
neuron_env = envs.NeuronEnv()
neuron_env.import_cell(morphology)
#create the simulation from the recording section:
sim = envs.NeuronSimulation(neuron_env.sections[0])

sim.go()
#sim.show()

a = sim.rec_v
a_t = pylab.linspace(0, sim.t_final*1000, len(sim.rec_v)

b=moose_env.rec_v *1000
b_t = pylab.linspace(0, sim.t_final*1000, len(sim.rec_v)
                     
from matplotlib import pyplot as plt
plt.plot(a)
plt.plot(b)
plt.show()
